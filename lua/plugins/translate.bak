
local api = vim.api

local loop = vim.loop
local utils = require "utils"

local term = require "plugins.terminal"

vim.keymap.set("x", ",t", function ()
    local res_tbl = {}

    local visual_tbl = utils.get_visual_select()

    local sline = vim.fn.getpos("v")[2]
    local eline = vim.fn.getpos(".")[2]
    -- local ns_id = api.nvim_create_namespace("TranslateVirt")

    local mode = api.nvim_get_mode().mode

    if mode == 'V' then
        for i = 1, #visual_tbl do
            local handle = nil
            local stdout = loop.new_pipe(false)
            handle = loop.spawn("curl", {
                    args = {
                        "-s", "-X", "POST", "https://api-free.deepl.com/v2/translate",
                        "-H", "Authorization: DeepL-Auth-Key 5b572043-9d05-0b9c-ace0-48acc8e38e0c:fx",
                        "-d", "target_lang=ZH&text=" .. visual_tbl[i],
                    },
                    stdio = { nil, stdout, nil },
                },
                function()
                    stdout:read_stop()
                    stdout:close()
                    handle:close()
                end
            )

            loop.read_start(stdout, vim.schedule_wrap (
                function (err, data)
                    if data ~= nil then
                        local res = vim.json.decode(data).translations[1].text
                        -- table.insert(res_tbl, res)

                        local virt_opts = {
                            id = 1,
                            virt_text_pos = "eol",
                            virt_text = {
                                { "  " .. res:gsub("^%s+", ''), "TranslateVirt" },
                            },
                        }

                        local ns_id = api.nvim_create_namespace("")

                        api.nvim_buf_set_extmark(0, ns_id, sline + i - 2, 0, virt_opts)
                    end
                end)
            )
        end
    elseif mode == 'v' then
        local str = table.concat(visual_tbl, '')

        str = str:gsub("%s%s+", ' ')

        -- TODO %s is actually \n
        local i = 1
        for line in string.gmatch(str, "[^%.]+") do
            local handle = nil
            local stdout = loop.new_pipe(false)
            handle = loop.spawn("curl", {
                    args = {
                        "-s", "-X", "POST", "https://api-free.deepl.com/v2/translate",
                        "-H", "Authorization: DeepL-Auth-Key 5b572043-9d05-0b9c-ace0-48acc8e38e0c:fx",
                        "-d", "target_lang=ZH&text=" .. line,
                    },
                    stdio = { nil, stdout, nil },
                },
                function()
                    stdout:read_stop()
                    stdout:close()
                    handle:close()
                end
            )

            loop.read_start(stdout, vim.schedule_wrap (
                function (err, data)
                    if data ~= nil then
                        local res = vim.json.decode(data).translations[1].text
                        -- table.insert(res_tbl, res)

                        local virt_opts = {
                            id = 1,
                            virt_text_pos = "eol",
                            virt_text = {
                                { "  " .. res, "TranslateVirt" },
                            },
                        }

                        local ns_id = api.nvim_create_namespace("")

                        api.nvim_buf_set_extmark(0, ns_id, sline + i - 2, 0, virt_opts)
                        i = i + 1
                    end
                end)
            )
        end
    end

end)

-- local api  = vim.api
-- local loop = vim.loop
--
-- local utils = require "utils"
--
-- vim.keymap.set('x', ',t', function ()
--     local visual_tbl = utils.get_visual_select()
--     local query_str  = table.concat(visual_tbl, '%0D')
--
--
--     query_str = query_str:gsub("%s", "%%20")
--
--     local handle = nil
--     local stdout = loop.new_pipe(false)
--     handle = loop.spawn("curl", {
--             args = {
--                 "-s", "-X", "POST", "https://api-free.deepl.com/v2/translate",
--                 "-H", "Authorization: DeepL-Auth-Key 5b572043-9d05-0b9c-ace0-48acc8e38e0c:fx",
--                 "-d", "target_lang=ZH&text=" .. query_str,
--             },
--             stdio = { nil, stdout, nil },
--         },
--         function()
--             stdout:read_stop()
--             stdout:close()
--             handle:close()
--         end
--     )
--
--     loop.read_start(stdout, vim.schedule_wrap (
--         function (err, data)
--             if data ~= nil then
--                 local res = vim.json.decode(data).translations[1].text
--
--                 local i = 0
--                 local sline = vim.fn.getpos('v')[2]
--                 for line in string.gmatch(res, "[^%s%s]+") do
--
--                     local ns_id = api.nvim_create_namespace("")
--
--                     local virt_opts = {
--                         id = 1,
--                         virt_text_pos = "eol",
--                         virt_text = {
--                             { "  " .. line, "TranslateVirt" },
--                         },
--                     }
--
--                     if api.nvim_buf_get_lines(0, sline + i - 1, sline + i, false)[1] == "" then
--                         i = i + 1
--                     end
--
--                     api.nvim_buf_set_extmark(0, ns_id, sline + i - 1, 0, virt_opts)
--
--                     i = i + 1
--                 end
--
--                 -- table.insert(res_tbl, res)
--
--                 -- local virt_opts = {
--                 --     id = 1,
--                 --     virt_text_pos = "eol",
--                 --     virt_text = {
--                 --         { "  " .. res:gsub("^%s+", ''), "TranslateVirt" },
--                 --     },
--                 -- }
--                 --
--                 -- local ns_id = api.nvim_create_namespace("")
--                 --
--                 -- api.nvim_buf_set_extmark(0, ns_id, sline + i - 2, 0, virt_opts)
--             end
--         end)
--     )
-- end)
